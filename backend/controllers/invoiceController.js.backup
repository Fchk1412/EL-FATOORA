import pool from "../db.js";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { generateInvoiceXML, formatDateForXML } from "./xmlGenerator.js";

// ES module __dirname equivalent
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Helper: Get full invoice data for XML generation
async function getInvoiceDataForXML(invoiceId) {
  // Get invoice with company and client data
  const invoiceResult = await pool.query(
    `
    SELECT i.*, 
           c.company_name, c.matricule_fiscal as company_client_code,
           cl.name as client_name, cl.street as client_address, cl.city as client_city,
           cl.postal_code as client_postal_code, cl.matricule_fiscal as client_tax_number
    FROM invoices i
    JOIN companies c ON i.company_id = c.id
    JOIN clients cl ON i.client_id = cl.id
    WHERE i.id = $1
  `,
    [invoiceId]
  );

  if (invoiceResult.rows.length === 0) return null;

  const invoice = invoiceResult.rows[0];

  // Get invoice items with product details
  const itemsResult = await pool.query(
    `
    SELECT ii.*, p.product_name, p.product_code
    FROM invoice_items ii
    JOIN products p ON ii.product_id = p.id
    WHERE ii.invoice_id = $1
  `,
    [invoiceId]
  );

  return { invoice, items: itemsResult.rows };
}

// Helper: Generate XML content using xmlbuilder2
function generateInvoiceXML(invoiceData) {
  const { invoice, items } = invoiceData;

  // Helper function to safely get values
  const safeValue = (value, defaultValue = "") => value || defaultValue;

  // Create XML manually using string concatenation
  let xml = '<?xml version="1.0" encoding="UTF-8"?>\n';
  xml += '<TEIF controllingAgency="TTN" version="1.8.8">\n';

  // Invoice Header
  xml += "  <InvoiceHeader>\n";
  xml += `    <MessageSenderIdentifier type="I-01">${
    sanitizeXMLValue(invoice.company_client_code) || "0000000000000"
  }</MessageSenderIdentifier>\n`;
  xml += `    <MessageRecieverIdentifier type="I-01">${
    sanitizeXMLValue(invoice.client_tax_number) || "0000000000000"
  }</MessageRecieverIdentifier>\n`;
  xml += "  </InvoiceHeader>\n";

  // Invoice Body
  xml += "  <InvoiceBody>\n";

  // Document info
  xml += "    <Bgm>\n";
  xml += `      <DocumentIdentifier>${sanitizeXMLValue(
    invoice.invoice_number
  )}</DocumentIdentifier>\n`;
  xml += '      <DocumentType code="I-11">Facture</DocumentType>\n';
  xml += "    </Bgm>\n";

  // Dates
  xml += "    <Dtm>\n";
  xml += `      <DateText format="ddMMyy" functionCode="I-31">${formatDateForXML(
    invoice.invoice_date
  )}</DateText>\n`;
  if (invoice.service_period_start && invoice.service_period_end) {
    xml += `      <DateText format="ddMMyy-ddMMyy" functionCode="I-36">${formatDateForXML(
      invoice.service_period_start
    )}-${formatDateForXML(invoice.service_period_end)}</DateText>\n`;
  }
  xml += `      <DateText format="ddMMyy" functionCode="I-32">${formatDateForXML(
    invoice.due_date
  )}</DateText>\n`;
  xml += "    </Dtm>\n";

  // Partner Section
  xml += "    <PartnerSection>\n";

  // Company Details
  xml += '      <PartnerDetails functionCode="I-62">\n';
  xml += "        <Nad>\n";
  xml += `          <PartnerIdentifier type="I-01">${
    sanitizeXMLValue(invoice.company_client_code) || "0000000000000"
  }</PartnerIdentifier>\n`;
  xml += `          <PartnerName nameType="Qualification">${sanitizeXMLValue(
    invoice.company_name
  )}</PartnerName>\n`;
  xml += '          <PartnerAdresses lang="fr">\n';
  xml += "            <AdressDescription></AdressDescription>\n";
  xml += "            <Street></Street>\n";
  xml += "            <CityName></CityName>\n";
  xml += "            <PostalCode></PostalCode>\n";
  xml += '            <Country codeList="ISO_3166-1">TN</Country>\n';
  xml += "          </PartnerAdresses>\n";
  xml += "        </Nad>\n";
  xml += "      </PartnerDetails>\n";

  // Client Details
  xml += '      <PartnerDetails functionCode="I-64">\n';
  xml += "        <Nad>\n";
  xml += `          <PartnerIdentifier type="I-01">${
    sanitizeXMLValue(invoice.client_tax_number) || "0000000000000"
  }</PartnerIdentifier>\n`;
  xml += `          <PartnerName nameType="Qualification">${sanitizeXMLValue(
    invoice.client_name
  )}</PartnerName>\n`;
  xml += '          <PartnerAdresses lang="fr">\n';
  xml += `            <AdressDescription>${
    sanitizeXMLValue(invoice.client_address) || ""
  }</AdressDescription>\n`;
  xml += "            <Street></Street>\n";
  xml += `            <CityName>${
    sanitizeXMLValue(invoice.client_city) || ""
  }</CityName>\n`;
  xml += `            <PostalCode>${
    sanitizeXMLValue(invoice.client_postal_code) || ""
  }</PostalCode>\n`;
  xml += '            <Country codeList="ISO_3166-1">TN</Country>\n';
  xml += "          </PartnerAdresses>\n";
  xml += "        </Nad>\n";
  xml += "      </PartnerDetails>\n";
  xml += "    </PartnerSection>\n";

  // Payment Section
  if (invoice.payment_terms || invoice.payment_rib) {
    xml += "    <PytSection>\n";
    xml += "      <PytSectionDetails>\n";
    xml += "        <Pyt>\n";
    xml += "          <PaymentTearmsTypeCode>I-114</PaymentTearmsTypeCode>\n";
    xml += `          <PaymentTearmsDescription>${
      sanitizeXMLValue(invoice.payment_terms) || ""
    }</PaymentTearmsDescription>\n`;
    xml += "        </Pyt>\n";

    if (invoice.payment_rib) {
      xml += "        <Pyt>\n";
      xml += "          <PaymentTearmsTypeCode>I-115</PaymentTearmsTypeCode>\n";
      xml += `          <PaymentTearmsDescription>RIB: ${sanitizeXMLValue(
        invoice.payment_rib
      )}</PaymentTearmsDescription>\n`;
      xml += "        </Pyt>\n";
    }

    xml += "      </PytSectionDetails>\n";
    xml += "    </PytSection>\n";
  }

  // Line Items
  xml += "    <LinSection>\n";
  items.forEach((item, index) => {
    xml += "      <Lin>\n";
    xml += `        <ItemIdentifier>${index + 1}</ItemIdentifier>\n`;
    xml += '        <LinImd lang="fr">\n';
    xml += `          <ItemCode>${
      sanitizeXMLValue(item.product_code) || "PROD"
    }</ItemCode>\n`;
    xml += `          <ItemDescription>${sanitizeXMLValue(
      item.product_name
    )}</ItemDescription>\n`;
    xml += "        </LinImd>\n";
    xml += "        <LinQty>\n";
    xml += `          <Quantity measurementUnit="UNIT">${item.quantity}</Quantity>\n`;
    xml += "        </LinQty>\n";
    xml += "        <LinTax>\n";
    xml += '          <TaxTypeName code="I-1602">TVA</TaxTypeName>\n';
    xml += "          <TaxDetails>\n";
    xml += `            <TaxRate>${item.tax_rate}</TaxRate>\n`;
    xml += "          </TaxDetails>\n";
    xml += "        </LinTax>\n";
    xml += "        <LinMoa>\n";
    xml += "          <MoaDetails>\n";
    xml +=
      '            <Moa amountTypeCode="I-183" currencyCodeList="ISO_4217">\n';
    xml += `              <Amount currencyIdentifier="TND">${Number(
      item.unit_price
    ).toFixed(3)}</Amount>\n`;
    xml += "            </Moa>\n";
    xml += "          </MoaDetails>\n";
    xml += "          <MoaDetails>\n";
    xml +=
      '            <Moa amountTypeCode="I-171" currencyCodeList="ISO_4217">\n';
    xml += `              <Amount currencyIdentifier="TND">${Number(
      item.amount_excl_tax
    ).toFixed(3)}</Amount>\n`;
    xml += "            </Moa>\n";
    xml += "          </MoaDetails>\n";
    xml += "        </LinMoa>\n";
    xml += "      </Lin>\n";
  });
  xml += "    </LinSection>\n";

  // Invoice Totals
  xml += "    <InvoiceMoa>\n";
  xml += "      <AmountDetails>\n";
  xml += '        <Moa amountTypeCode="I-176" currencyCodeList="ISO_4217">\n';
  xml += `          <Amount currencyIdentifier="TND">${Number(
    invoice.total_excl_tax
  ).toFixed(3)}</Amount>\n`;
  xml += "        </Moa>\n";
  xml += "      </AmountDetails>\n";
  xml += "      <AmountDetails>\n";
  xml += '        <Moa amountTypeCode="I-180" currencyCodeList="ISO_4217">\n';
  xml += `          <Amount currencyIdentifier="TND">${Number(
    invoice.total_amount
  ).toFixed(3)}</Amount>\n`;
  xml += `          <AmountDescription lang="fr">${
    sanitizeXMLValue(invoice.total_amount_words) || ""
  }</AmountDescription>\n`;
  xml += "        </Moa>\n";
  xml += "      </AmountDetails>\n";
  xml += "      <AmountDetails>\n";
  xml += '        <Moa amountTypeCode="I-181" currencyCodeList="ISO_4217">\n';
  xml += `          <Amount currencyIdentifier="TND">${Number(
    invoice.total_tax
  ).toFixed(3)}</Amount>\n`;
  xml += "        </Moa>\n";
  xml += "      </AmountDetails>\n";
  xml += "    </InvoiceMoa>\n";

  // Tax Details
  xml += "    <InvoiceTax>\n";
  xml += "      <InvoiceTaxDetails>\n";
  xml += "        <Tax>\n";
  xml += '          <TaxTypeName code="I-1601">droit de timbre</TaxTypeName>\n';
  xml += "          <TaxDetails>\n";
  xml += "            <TaxRate>0</TaxRate>\n";
  xml += "          </TaxDetails>\n";
  xml += "        </Tax>\n";
  xml += "        <AmountDetails>\n";
  xml += '          <Moa amountTypeCode="I-178" currencyCodeList="ISO_4217">\n';
  xml += `            <Amount currencyIdentifier="TND">${Number(
    invoice.stamp_duty || 0
  ).toFixed(3)}</Amount>\n`;
  xml += "          </Moa>\n";
  xml += "        </AmountDetails>\n";
  xml += "      </InvoiceTaxDetails>\n";
  xml += "      <InvoiceTaxDetails>\n";
  xml += "        <Tax>\n";
  xml += '          <TaxTypeName code="I-1602">TVA</TaxTypeName>\n';
  xml += "          <TaxDetails>\n";
  xml += "            <TaxRate>19.0</TaxRate>\n";
  xml += "          </TaxDetails>\n";
  xml += "        </Tax>\n";
  xml += "        <AmountDetails>\n";
  xml += '          <Moa amountTypeCode="I-178" currencyCodeList="ISO_4217">\n';
  xml += `            <Amount currencyIdentifier="TND">${Number(
    invoice.total_tax
  ).toFixed(3)}</Amount>\n`;
  xml += "          </Moa>\n";
  xml += "        </AmountDetails>\n";
  xml += "      </InvoiceTaxDetails>\n";
  xml += "    </InvoiceTax>\n";

  xml += "  </InvoiceBody>\n";
  xml += "</TEIF>\n";

  return xml;
}

const invoiceController = {
  // Get all invoices for a company
  getInvoicesByCompany: async (req, res) => {
    try {
      const companyId = parseInt(req.params.companyId, 10);
      if (!companyId || isNaN(companyId)) {
        return res.status(400).json({ error: "Invalid company_id" });
      }

      const result = await pool.query(
        `SELECT i.*, c.name AS client_name 
         FROM invoices i
         JOIN clients c ON i.client_id = c.id
         WHERE i.company_id = $1
         ORDER BY i.created_at DESC`,
        [companyId]
      );
      res.json(result.rows);
    } catch (err) {
      console.error("Get invoices error:", err);
      res.status(500).json({ error: "Server error" });
    }
  },

  // Create new invoice with items and generate XML
  createInvoice: async (req, res) => {
    const client = await pool.connect();
    try {
      const {
        company_id,
        client_id,
        invoice_number,
        document_type,
        invoice_date,
        service_period_start,
        service_period_end,
        due_date,
        payment_terms,
        payment_rib,
        stamp_duty,
        items,
      } = req.body;

      const companyId = parseInt(company_id, 10);
      if (!companyId || isNaN(companyId)) {
        return res.status(400).json({ error: "Invalid company_id" });
      }

      await client.query("BEGIN");

      // Calculate totals
      let totalExcl = 0,
        totalIncl = 0,
        totalTax = 0;

      items.forEach((item) => {
        const excl = item.quantity * item.unit_price;
        const tax = (excl * item.tax_rate) / 100;
        totalExcl += excl;
        totalTax += tax;
        totalIncl += excl + tax;
      });

      // Insert invoice
      const invoiceResult = await client.query(
        `INSERT INTO invoices 
          (company_id, client_id, invoice_number, document_type, invoice_date, 
           service_period_start, service_period_end, due_date, 
           payment_terms, payment_rib, stamp_duty, 
           total_excl_tax, total_incl_tax, total_tax, total_amount, total_amount_words)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
         RETURNING id`,
        [
          companyId,
          client_id,
          invoice_number,
          document_type,
          invoice_date,
          service_period_start,
          service_period_end,
          due_date,
          payment_terms,
          payment_rib,
          stamp_duty,
          totalExcl,
          totalIncl,
          totalTax,
          totalIncl,
          "",
        ]
      );

      const invoiceId = invoiceResult.rows[0].id;

      // Insert items with calculated amounts
      for (const item of items) {
        const excl = item.quantity * item.unit_price;
        const tax = (excl * item.tax_rate) / 100;
        const incl = excl + tax;

        await client.query(
          `INSERT INTO invoice_items 
           (invoice_id, product_id, quantity, unit_price, tax_rate, 
            amount_excl_tax, amount_incl_tax, tax_amount)
           VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
          [
            invoiceId,
            item.product_id,
            item.quantity,
            item.unit_price,
            item.tax_rate,
            excl,
            incl,
            tax,
          ]
        );
      }

      await client.query("COMMIT");

      // Generate XML file
      try {
        const invoiceData = await getInvoiceDataForXML(invoiceId);
        if (invoiceData) {
          const xmlContent = generateInvoiceXML(invoiceData);

          // Create invoices directory if it doesn't exist
          const invoicesDir = path.join(__dirname, "../invoices");
          if (!fs.existsSync(invoicesDir)) {
            fs.mkdirSync(invoicesDir, { recursive: true });
          }

          // Save XML file
          const xmlFilePath = path.join(
            invoicesDir,
            `invoice_${invoiceId}.xml`
          );
          fs.writeFileSync(xmlFilePath, xmlContent);

          console.log(`✅ XML file generated: ${xmlFilePath}`);

          res.json({
            message: "Invoice created successfully",
            invoiceId,
            xmlGenerated: true,
            xmlPath: xmlFilePath,
          });
        } else {
          res.json({
            message: "Invoice created successfully",
            invoiceId,
            xmlGenerated: false,
            error: "Could not retrieve invoice data for XML generation",
          });
        }
      } catch (xmlError) {
        console.error("XML generation error:", xmlError);
        res.json({
          message: "Invoice created successfully",
          invoiceId,
          xmlGenerated: false,
          xmlError: xmlError.message,
        });
      }
    } catch (err) {
      console.error("Create invoice error:", err);
      await client.query("ROLLBACK");
      res.status(500).json({ error: "Server error" });
    } finally {
      client.release();
    }
  },

  // Get invoice XML by ID
  getInvoiceXML: async (req, res) => {
    try {
      const invoiceId = req.params.id;
      const xmlFilePath = path.join(
        __dirname,
        `../invoices/invoice_${invoiceId}.xml`
      );

      if (!fs.existsSync(xmlFilePath)) {
        return res.status(404).json({ error: "XML file not found" });
      }

      res.setHeader("Content-Type", "application/xml");
      res.setHeader(
        "Content-Disposition",
        `attachment; filename="invoice_${invoiceId}.xml"`
      );
      res.sendFile(path.resolve(xmlFilePath));
    } catch (err) {
      console.error("Get XML error:", err);
      res.status(500).json({ error: "Server error" });
    }
  },

  // Delete invoice
  deleteInvoice: async (req, res) => {
    try {
      await pool.query("DELETE FROM invoices WHERE id = $1", [req.params.id]);

      // Also try to delete the XML file
      const xmlFilePath = path.join(
        __dirname,
        `../invoices/invoice_${req.params.id}.xml`
      );
      if (fs.existsSync(xmlFilePath)) {
        fs.unlinkSync(xmlFilePath);
      }

      res.json({ message: "Invoice deleted successfully" });
    } catch (err) {
      console.error("Delete invoice error:", err);
      res.status(500).json({ error: "Server error" });
    }
  },
};

export default invoiceController;
